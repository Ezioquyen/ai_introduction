/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.0.20
 * Generated at: 2023-12-10 15:14:29 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.example.GUI;

import jakarta.servlet.*;
import jakarta.servlet.http.*;

public final class map_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <title>Bản đồ Google Maps</title>\n");
      out.write("    <style>\n");
      out.write("        /* Tạo overlay cho div chứa bản đồ */\n");
      out.write("        #map {\n");
      out.write("        position: relative;\n");
      out.write("        height: 700px;\n");
      out.write("        width: 79%;\n");
      out.write("        float: right; /* Hiển thị bản đồ bên phải */\n");
      out.write("        }\n");
      out.write("        #map-overlay {\n");
      out.write("            position: absolute;\n");
      out.write("            top: 0;\n");
      out.write("            left: 0;\n");
      out.write("            height: 100%;\n");
      out.write("            width: 100%;\n");
      out.write("            background-color: rgba(255, 255, 255, 0.7); /* Màu overlay */\n");
      out.write("            z-index: 1; /* Đảm bảo overlay nằm phía trên bản đồ */\n");
      out.write("        }    \n");
      out.write("        #search-container {\n");
      out.write("            position: relative;\n");
      out.write("            top: 15px;\n");
      out.write("            left: 15px;\n");
      out.write("            z-index: 2; /* Đặt ô search trên cùng */\n");
      out.write("            float: left; /* Hiển thị ô search bên trái */\n");
      out.write("        }\n");
      out.write("        #search-container input[type=\"text\"],\n");
      out.write("        #search-container button {\n");
      out.write("            padding: 8px;\n");
      out.write("            font-size: 16px;\n");
      out.write("        }\n");
      out.write("        .suggestion_container {\n");
      out.write("        position: absolute; /* Sẽ được đặt ở một vị trí cụ thể trong #search_container */\n");
      out.write("        top: 100%; /* Đặt vị trí từ phía trên dưới của input */\n");
      out.write("        left: 0; /* Đặt vị trí từ bên trái */\n");
      out.write("        width: 100%; /* Chiều rộng tối đa */\n");
      out.write("        background-color: #fff; /* Màu nền */\n");
      out.write("        border: 1px solid #ccc; /* Viền */\n");
      out.write("        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Đổ bóng */\n");
      out.write("        display: none; /* Ban đầu ẩn đi, sẽ được hiển thị khi có suggestion */\n");
      out.write("        z-index: 1; /* Đặt layer trên các phần tử khác nằm dưới */\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        /* CSS để hiển thị suggestion container khi input được focus */\n");
      out.write("        #search_input:focus + .suggestion_container {\n");
      out.write("            display: block;\n");
      out.write("        }\n");
      out.write("\n");
      out.write("        /* CSS cho suggestion items (cần điều chỉnh thêm) */\n");
      out.write("        .suggestion_container .suggestion_item {\n");
      out.write("            padding: 8px;\n");
      out.write("            border-bottom: 1px solid #ddd;\n");
      out.write("            cursor: pointer;\n");
      out.write("        }      \n");
      out.write("    </style>\n");
      out.write("    <script src=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDyNLkGVhnKcMxxtDn9yTzjPrXxsqMq08k\"></script>\n");
      out.write("    <script>\n");
      out.write("        function initMap() {\n");
      out.write("            var myLatLng = {lat: 21.031369, lng: 105.832756}; // Tọa độ vĩ độ và kinh độ mặc định\n");
      out.write("            var map = new google.maps.Map(document.getElementById('map'), {\n");
      out.write("                zoom: 8,\n");
      out.write("                center: myLatLng\n");
      out.write("            });     \n");
      out.write("            var marker = new google.maps.Marker({\n");
      out.write("                position: myLatLng,\n");
      out.write("                map: map,\n");
      out.write("                title: 'Đây là địa điểm!'\n");
      out.write("            });\n");
      out.write("            var r=['21.031369,105.832756|21.031512,105.832144|21.031369,105.832756'];\n");
      out.write("            var coordinates = r[0].split(\"|\");\n");
      out.write("            var flightPlanCoordinates = new Array();\n");
      out.write("            for(i=0;i<coordinates.length;i++)\n");
      out.write("            {  \n");
      out.write("            var point =new google.maps.LatLng(coordinates[i].split(',')[0],coordinates[i].split(',')[1]);\n");
      out.write("            flightPlanCoordinates.push(point);   \n");
      out.write("            }   \n");
      out.write("            var flightPath = new google.maps.Polyline({\n");
      out.write("             path: flightPlanCoordinates,\n");
      out.write("             geodesic: true,\n");
      out.write("             strokeColor: '#FC6480',\n");
      out.write("             strokeOpacity: 0.8,\n");
      out.write("             strokeWeight: 10\n");
      out.write("             });\n");
      out.write("            flightPath.setMap(map);\n");
      out.write("        }\n");
      out.write("            google.maps.event.addDomListener(window, 'load', initialize);\n");
      out.write(" \n");
      out.write("    </script>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("    <div id=\"search-container\">\n");
      out.write("        <input type=\"text\" name=\"search\" placeholder=\"Tìm kiếm\">\n");
      out.write("        <button type=\"submit\">Search</button>\n");
      out.write("        <div class=\"suggestion_container\">\n");
      out.write("            <div class=\"suggestion_item\">Kết quả tìm kiếm 1</div>\n");
      out.write("            <div class=\"suggestion_item\">Kết quả tìm kiếm 2</div>\n");
      out.write("            <div class=\"suggestion_item\">Kết quả tìm kiếm 3</div>\n");
      out.write("            <!-- Các suggestion items sẽ được thêm vào đây -->\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("    <div id=\"map\">\n");
      out.write("        <div id=\"map-overlay\">\n");
      out.write("            \n");
      out.write("            <!-- Nội dung của overlay -->\n");
      out.write("        </div>\n");
      out.write("    </div>\n");
      out.write("    <script>initMap();</script>\n");
      out.write("</body>\n");
      out.write("\n");
      out.write("</html>\n");
      out.write("\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
